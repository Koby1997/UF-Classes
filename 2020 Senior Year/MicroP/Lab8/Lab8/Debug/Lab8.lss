
Lab8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000200  00802000  000003b4  00000448  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00802200  00802200  00000648  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000648  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000678  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000006b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004fee  00000000  00000000  00000710  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003c7a  00000000  00000000  000056fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000626  00000000  00000000  00009378  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  000099a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003efe  00000000  00000000  00009a34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ec  00000000  00000000  0000d932  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  0000da1e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
   8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
   c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  10:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  14:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  18:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  1c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  20:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  24:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  28:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  2c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  30:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  34:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  38:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  3c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  40:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  44:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  48:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  4c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  50:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  54:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  58:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  5c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  60:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  64:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  68:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  6c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  70:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  74:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  78:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  7c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  80:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  84:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  88:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  8c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  90:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  94:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  98:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  9c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  ac:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  bc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  cc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  dc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  ec:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  fc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 100:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 104:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 108:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 10c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 110:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 114:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 118:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 11c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 120:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 124:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 128:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 12c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 130:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 134:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 138:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 13c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 140:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 144:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 148:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 14c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 150:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 154:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 158:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 15c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 160:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 164:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 168:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 16c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 170:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 174:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 178:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 17c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 180:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 184:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 188:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 18c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 190:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 194:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 198:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 19c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1ac:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1bc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1cc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1dc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1ec:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
 214:	12 e2       	ldi	r17, 0x22	; 34
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	e4 eb       	ldi	r30, 0xB4	; 180
 21c:	f3 e0       	ldi	r31, 0x03	; 3
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0b bf       	out	0x3b, r16	; 59
 222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
 224:	07 90       	elpm	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	a0 30       	cpi	r26, 0x00	; 0
 22a:	b1 07       	cpc	r27, r17
 22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
 22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
 230:	22 e2       	ldi	r18, 0x22	; 34
 232:	a0 e0       	ldi	r26, 0x00	; 0
 234:	b2 e2       	ldi	r27, 0x22	; 34
 236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
 238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
 23a:	a2 30       	cpi	r26, 0x02	; 2
 23c:	b2 07       	cpc	r27, r18
 23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
 240:	0e 94 3c 01 	call	0x278	; 0x278 <main>
 244:	0c 94 d8 01 	jmp	0x3b0	; 0x3b0 <_exit>

00000248 <__bad_interrupt>:
 248:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000024c <clock_init>:

 .section .text

 .global clock_init
 clock_init:
	push r24
 24c:	8f 93       	push	r24

	ldi r24, OSC_RC32MEN_bm
 24e:	82 e0       	ldi	r24, 0x02	; 2
	sts OSC_CTRL, R24		;Enables the 32MHz internal oscillator
 250:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>

00000254 <check32MHzStatus>:

check32MHzStatus:
	lds	r24, OSC_STATUS
 254:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	;Ensure that the 32MHz clock is ready before proceeding
	sbrs r24, OSC_RC32MRDY_bp
 258:	81 ff       	sbrs	r24, 1
	rjmp check32MHzStatus
 25a:	fc cf       	rjmp	.-8      	; 0x254 <check32MHzStatus>

	;Writing to CCP disables interrupts for a certain number of cycles
	;to give the clock time to switch sources. It also enables writes to certain registers.
	ldi r24, 0xD8
 25c:	88 ed       	ldi	r24, 0xD8	; 216
	sts CPU_CCP, r24				
 25e:	80 93 34 00 	sts	0x0034, r24	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>

	;Finally, select the now-ready 32MHz oscillator as the new clock source. 
	ldi	r24, 0x01
 262:	81 e0       	ldi	r24, 0x01	; 1
	sts CLK_CTRL, r24
 264:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>

00000268 <skip32MHZ_enable>:
skip32MHZ_enable:
	;CPU CLK prescaler settings 
	;Use values that are powers of 2 from 1 to 512 (1, 2, 4, 8, 16, ..., 512) for A. See Table 7-2 in the manual. 
	;You can also change B/C. See Table 7-3 in the manual. 

	ldi r24, 0xD8
 268:	88 ed       	ldi	r24, 0xD8	; 216
	sts CPU_CCP, r24
 26a:	80 93 34 00 	sts	0x0034, r24	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>
	
	ldi r24, ((0x00 << 2) | (0x00 << 0))	;32MHz
 26e:	80 e0       	ldi	r24, 0x00	; 0
	;ldi r24, (CLK_PSADIV_4_gc | CLK_PSBCDIV_1_1_gc) ;8MHz

	sts CLK_PSCTRL, r24
 270:	80 93 41 00 	sts	0x0041, r24	; 0x800041 <__TEXT_REGION_LENGTH__+0x700041>

	pop r24
 274:	8f 91       	pop	r24

 276:	08 95       	ret

00000278 <main>:
	0x4f0,0x51f,0x54e,0x57d,0x5ad,0x5dd,0x60e,0x63f,0x670,0x6a1,
	0x6d3,0x705,0x737,0x769,0x79b,0x7cd,0x800
};

int main(void)
{
 278:	cf 93       	push	r28
 27a:	df 93       	push	r29
 27c:	cd b7       	in	r28, 0x3d	; 61
 27e:	de b7       	in	r29, 0x3e	; 62
	clock_init();
 280:	0e 94 26 01 	call	0x24c	; 0x24c <clock_init>
	dac_init();
 284:	0e 94 86 01 	call	0x30c	; 0x30c <dac_init>
	tcc0_init();
 288:	0e 94 b0 01 	call	0x360	; 0x360 <tcc0_init>
	intr_init();
 28c:	0e 94 a2 01 	call	0x344	; 0x344 <intr_init>
	
	
	PORTC.DIRSET = 0x80;
 290:	80 e4       	ldi	r24, 0x40	; 64
 292:	96 e0       	ldi	r25, 0x06	; 6
 294:	20 e8       	ldi	r18, 0x80	; 128
 296:	fc 01       	movw	r30, r24
 298:	21 83       	std	Z+1, r18	; 0x01
	PORTC.OUTSET = 0x80;
 29a:	80 e4       	ldi	r24, 0x40	; 64
 29c:	96 e0       	ldi	r25, 0x06	; 6
 29e:	20 e8       	ldi	r18, 0x80	; 128
 2a0:	fc 01       	movw	r30, r24
 2a2:	25 83       	std	Z+5, r18	; 0x05
	
	array_position = 0;
 2a4:	10 92 00 22 	sts	0x2200, r1	; 0x802200 <__data_end>
 2a8:	10 92 01 22 	sts	0x2201, r1	; 0x802201 <__data_end+0x1>
	
	
    while (1) 
    {	
		while(!(DACA.STATUS & DAC_CH1DRE_bm));
 2ac:	00 00       	nop
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	93 e0       	ldi	r25, 0x03	; 3
 2b2:	fc 01       	movw	r30, r24
 2b4:	85 81       	ldd	r24, Z+5	; 0x05
 2b6:	88 2f       	mov	r24, r24
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	82 70       	andi	r24, 0x02	; 2
 2bc:	99 27       	eor	r25, r25
 2be:	89 2b       	or	r24, r25
 2c0:	b1 f3       	breq	.-20     	; 0x2ae <main+0x36>

		/* Write digital data to the CH1DATA register. 0 = 0V, 0xFFF = VREF. */
		DACA.CH1DATA = sine[array_position];
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	93 e0       	ldi	r25, 0x03	; 3
 2c6:	20 91 00 22 	lds	r18, 0x2200	; 0x802200 <__data_end>
 2ca:	30 91 01 22 	lds	r19, 0x2201	; 0x802201 <__data_end+0x1>
 2ce:	22 0f       	add	r18, r18
 2d0:	33 1f       	adc	r19, r19
 2d2:	20 50       	subi	r18, 0x00	; 0
 2d4:	30 4e       	sbci	r19, 0xE0	; 224
 2d6:	f9 01       	movw	r30, r18
 2d8:	20 81       	ld	r18, Z
 2da:	31 81       	ldd	r19, Z+1	; 0x01
 2dc:	fc 01       	movw	r30, r24
 2de:	22 8f       	std	Z+26, r18	; 0x1a
 2e0:	33 8f       	std	Z+27, r19	; 0x1b
		array_position++;
 2e2:	80 91 00 22 	lds	r24, 0x2200	; 0x802200 <__data_end>
 2e6:	90 91 01 22 	lds	r25, 0x2201	; 0x802201 <__data_end+0x1>
 2ea:	01 96       	adiw	r24, 0x01	; 1
 2ec:	80 93 00 22 	sts	0x2200, r24	; 0x802200 <__data_end>
 2f0:	90 93 01 22 	sts	0x2201, r25	; 0x802201 <__data_end+0x1>
			
		if(array_position == 256)
 2f4:	80 91 00 22 	lds	r24, 0x2200	; 0x802200 <__data_end>
 2f8:	90 91 01 22 	lds	r25, 0x2201	; 0x802201 <__data_end+0x1>
 2fc:	81 15       	cp	r24, r1
 2fe:	91 40       	sbci	r25, 0x01	; 1
 300:	a9 f6       	brne	.-86     	; 0x2ac <main+0x34>
		{
		array_position = 0;
 302:	10 92 00 22 	sts	0x2200, r1	; 0x802200 <__data_end>
 306:	10 92 01 22 	sts	0x2201, r1	; 0x802201 <__data_end+0x1>
		}	
	
    }
 30a:	d0 cf       	rjmp	.-96     	; 0x2ac <main+0x34>

0000030c <dac_init>:
}



void dac_init(void)
{
 30c:	cf 93       	push	r28
 30e:	df 93       	push	r29
 310:	cd b7       	in	r28, 0x3d	; 61
 312:	de b7       	in	r29, 0x3e	; 62
	/* Use only channel 1 */
	DACA.CTRLB = DAC_CHSEL_SINGLE1_gc | DAC_CH1TRIG_bm;
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	93 e0       	ldi	r25, 0x03	; 3
 318:	22 e2       	ldi	r18, 0x22	; 34
 31a:	fc 01       	movw	r30, r24
 31c:	21 83       	std	Z+1, r18	; 0x01
	
	/* Use AREFB (2.5V). Data is right-adjusted. */
	DACA.CTRLC = DAC_REFSEL_AREFB_gc;
 31e:	80 e0       	ldi	r24, 0x00	; 0
 320:	93 e0       	ldi	r25, 0x03	; 3
 322:	28 e1       	ldi	r18, 0x18	; 24
 324:	fc 01       	movw	r30, r24
 326:	22 83       	std	Z+2, r18	; 0x02
	
	/* Enable channel 0, as well as the overall DAC module. */
	DACA.CTRLA = DAC_CH1EN_bm | DAC_ENABLE_bm;	
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	93 e0       	ldi	r25, 0x03	; 3
 32c:	29 e0       	ldi	r18, 0x09	; 9
 32e:	fc 01       	movw	r30, r24
 330:	20 83       	st	Z, r18
	
	/* make a DAC conversion start when Event Channel 0 is triggered */
	DACA.EVCTRL = DAC_EVSEL_1_gc;
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	93 e0       	ldi	r25, 0x03	; 3
 336:	21 e0       	ldi	r18, 0x01	; 1
 338:	fc 01       	movw	r30, r24
 33a:	23 83       	std	Z+3, r18	; 0x03
}
 33c:	00 00       	nop
 33e:	df 91       	pop	r29
 340:	cf 91       	pop	r28
 342:	08 95       	ret

00000344 <intr_init>:

void intr_init(void)
{
 344:	cf 93       	push	r28
 346:	df 93       	push	r29
 348:	cd b7       	in	r28, 0x3d	; 61
 34a:	de b7       	in	r29, 0x3e	; 62
	/* Enable low level interrupts in the PMIC. */
	PMIC.CTRL = PMIC_LOLVLEN_bm;
 34c:	80 ea       	ldi	r24, 0xA0	; 160
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	21 e0       	ldi	r18, 0x01	; 1
 352:	fc 01       	movw	r30, r24
 354:	22 83       	std	Z+2, r18	; 0x02
	
	/* Enable interrupts globally. */
	sei();
 356:	78 94       	sei
}
 358:	00 00       	nop
 35a:	df 91       	pop	r29
 35c:	cf 91       	pop	r28
 35e:	08 95       	ret

00000360 <tcc0_init>:


void tcc0_init(void)
{
 360:	cf 93       	push	r28
 362:	df 93       	push	r29
 364:	cd b7       	in	r28, 0x3d	; 61
 366:	de b7       	in	r29, 0x3e	; 62
	// so our PER = (1/1760Hz) /256 = 1/256000
	//;TCC0_PER = (fclk/prescalar) * (duration in seconds)
	//;				32MH/1					1/459560
	//this didn't give a value withing 2% so I manually changed the PER
	
	TCC0.CNT = 0;
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	98 e0       	ldi	r25, 0x08	; 8
 36c:	fc 01       	movw	r30, r24
 36e:	10 a2       	std	Z+32, r1	; 0x20
 370:	11 a2       	std	Z+33, r1	; 0x21
	TCC0.PER = 72;//(32000000/1) / 459560; // = 69 but didn't work
 372:	80 e0       	ldi	r24, 0x00	; 0
 374:	98 e0       	ldi	r25, 0x08	; 8
 376:	28 e4       	ldi	r18, 0x48	; 72
 378:	30 e0       	ldi	r19, 0x00	; 0
 37a:	fc 01       	movw	r30, r24
 37c:	26 a3       	std	Z+38, r18	; 0x26
 37e:	37 a3       	std	Z+39, r19	; 0x27
	TCC0.CTRLA = TC_CLKSEL_DIV1_gc;
 380:	80 e0       	ldi	r24, 0x00	; 0
 382:	98 e0       	ldi	r25, 0x08	; 8
 384:	21 e0       	ldi	r18, 0x01	; 1
 386:	fc 01       	movw	r30, r24
 388:	20 83       	st	Z, r18
	
	/* Clear OVFIF to be safe */
	TCC0.INTCTRLA = TC_OVFINTLVL_LO_gc;	
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	98 e0       	ldi	r25, 0x08	; 8
 38e:	21 e0       	ldi	r18, 0x01	; 1
 390:	fc 01       	movw	r30, r24
 392:	26 83       	std	Z+6, r18	; 0x06
	
	/* Set as low level interrupt */
	TCC0.INTCTRLA = TC_OVFINTLVL_LO_gc;
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	98 e0       	ldi	r25, 0x08	; 8
 398:	21 e0       	ldi	r18, 0x01	; 1
 39a:	fc 01       	movw	r30, r24
 39c:	26 83       	std	Z+6, r18	; 0x06
	
	EVSYS.CH1MUX = EVSYS_CHMUX_TCC0_OVF_gc;
 39e:	80 e8       	ldi	r24, 0x80	; 128
 3a0:	91 e0       	ldi	r25, 0x01	; 1
 3a2:	20 ec       	ldi	r18, 0xC0	; 192
 3a4:	fc 01       	movw	r30, r24
 3a6:	21 83       	std	Z+1, r18	; 0x01
}
 3a8:	00 00       	nop
 3aa:	df 91       	pop	r29
 3ac:	cf 91       	pop	r28
 3ae:	08 95       	ret

000003b0 <_exit>:
 3b0:	f8 94       	cli

000003b2 <__stop_program>:
 3b2:	ff cf       	rjmp	.-2      	; 0x3b2 <__stop_program>
