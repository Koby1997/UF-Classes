
Practical2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000051a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00802000  0000051a  000005ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00802006  00802006  000005b4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000628  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004c17  00000000  00000000  00000690  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003c7a  00000000  00000000  000052a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006a1  00000000  00000000  00008f21  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f0  00000000  00000000  000095c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003206  00000000  00000000  000096b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001b0  00000000  00000000  0000c8ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  0000ca6a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
   8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
   c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  10:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  14:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  18:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  1c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  20:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  24:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  28:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  2c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  30:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  34:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  38:	0c 94 10 02 	jmp	0x420	; 0x420 <__vector_14>
  3c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  40:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  44:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  48:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  4c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  50:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  54:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  58:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  5c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  60:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  64:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  68:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  6c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  70:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  74:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  78:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  7c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  80:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  84:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  88:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  8c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  90:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  94:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  98:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  9c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  ac:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  bc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  cc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  dc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  ec:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  fc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 100:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 104:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 108:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 10c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 110:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 114:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 118:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 11c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 120:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 124:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 128:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 12c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 130:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 134:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 138:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 13c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 140:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 144:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 148:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 14c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 150:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 154:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 158:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 15c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 160:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 164:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 168:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 16c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 170:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 174:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 178:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 17c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 180:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 184:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 188:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 18c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 190:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 194:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 198:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 19c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1ac:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1bc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1cc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1dc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1ec:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
 214:	10 e2       	ldi	r17, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	ea e1       	ldi	r30, 0x1A	; 26
 21c:	f5 e0       	ldi	r31, 0x05	; 5
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0b bf       	out	0x3b, r16	; 59
 222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
 224:	07 90       	elpm	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	a6 30       	cpi	r26, 0x06	; 6
 22a:	b1 07       	cpc	r27, r17
 22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
 22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
 230:	20 e2       	ldi	r18, 0x20	; 32
 232:	a6 e0       	ldi	r26, 0x06	; 6
 234:	b0 e2       	ldi	r27, 0x20	; 32
 236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
 238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
 23a:	ac 30       	cpi	r26, 0x0C	; 12
 23c:	b2 07       	cpc	r27, r18
 23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
 240:	0e 94 3c 01 	call	0x278	; 0x278 <main>
 244:	0c 94 8b 02 	jmp	0x516	; 0x516 <_exit>

00000248 <__bad_interrupt>:
 248:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000024c <clock_init>:

 .section .text

 .global clock_init
 clock_init:
	push r24
 24c:	8f 93       	push	r24

	ldi r24, OSC_RC32MEN_bm
 24e:	82 e0       	ldi	r24, 0x02	; 2
	sts OSC_CTRL, R24		;Enables the 32MHz internal oscillator
 250:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>

00000254 <check32MHzStatus>:

check32MHzStatus:
	lds	r24, OSC_STATUS
 254:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	;Ensure that the 32MHz clock is ready before proceeding
	sbrs r24, OSC_RC32MRDY_bp
 258:	81 ff       	sbrs	r24, 1
	rjmp check32MHzStatus
 25a:	fc cf       	rjmp	.-8      	; 0x254 <check32MHzStatus>

	;Writing to CCP disables interrupts for a certain number of cycles
	;to give the clock time to switch sources. It also enables writes to certain registers.
	ldi r24, 0xD8
 25c:	88 ed       	ldi	r24, 0xD8	; 216
	sts CPU_CCP, r24				
 25e:	80 93 34 00 	sts	0x0034, r24	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>

	;Finally, select the now-ready 32MHz oscillator as the new clock source. 
	ldi	r24, 0x01
 262:	81 e0       	ldi	r24, 0x01	; 1
	sts CLK_CTRL, r24
 264:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>

00000268 <skip32MHZ_enable>:
skip32MHZ_enable:
	;CPU CLK prescaler settings 
	;Use values that are powers of 2 from 1 to 512 (1, 2, 4, 8, 16, ..., 512) for A. See Table 7-2 in the manual. 
	;You can also change B/C. See Table 7-3 in the manual. 

	ldi r24, 0xD8
 268:	88 ed       	ldi	r24, 0xD8	; 216
	sts CPU_CCP, r24
 26a:	80 93 34 00 	sts	0x0034, r24	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>
	
	ldi r24, ((0x00 << 2) | (0x00 << 0))	;32MHz
 26e:	80 e0       	ldi	r24, 0x00	; 0
	;ldi r24, (CLK_PSADIV_4_gc | CLK_PSBCDIV_1_1_gc) ;8MHz

	sts CLK_PSCTRL, r24
 270:	80 93 41 00 	sts	0x0041, r24	; 0x800041 <__TEXT_REGION_LENGTH__+0x700041>

	pop r24
 274:	8f 91       	pop	r24

 276:	08 95       	ret

00000278 <main>:
	0x000, 0x7FF, 0xFFF
};


int main(void)
{
 278:	cf 93       	push	r28
 27a:	df 93       	push	r29
 27c:	cd b7       	in	r28, 0x3d	; 61
 27e:	de b7       	in	r29, 0x3e	; 62
	clock_init();
 280:	0e 94 26 01 	call	0x24c	; 0x24c <clock_init>
	io_init();
 284:	0e 94 a8 01 	call	0x350	; 0x350 <io_init>
	frequency = 3744;
 288:	80 ea       	ldi	r24, 0xA0	; 160
 28a:	9e e0       	ldi	r25, 0x0E	; 14
 28c:	80 93 08 20 	sts	0x2008, r24	; 0x802008 <frequency>
 290:	90 93 09 20 	sts	0x2009, r25	; 0x802009 <frequency+0x1>
	tcc0_init();
 294:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <tcc0_init>
	dac_init();
 298:	0e 94 b5 01 	call	0x36a	; 0x36a <dac_init>
	intr_init();
 29c:	0e 94 cb 01 	call	0x396	; 0x396 <intr_init>
	
	old_temp = 0x00;
 2a0:	10 92 0a 20 	sts	0x200A, r1	; 0x80200a <old_temp>
    while (1) 
    {
		new_temp = (PORTE.IN & 0b00000001);
 2a4:	80 e8       	ldi	r24, 0x80	; 128
 2a6:	96 e0       	ldi	r25, 0x06	; 6
 2a8:	fc 01       	movw	r30, r24
 2aa:	80 85       	ldd	r24, Z+8	; 0x08
 2ac:	81 70       	andi	r24, 0x01	; 1
 2ae:	80 93 0b 20 	sts	0x200B, r24	; 0x80200b <new_temp>
		
		if(new_temp == 0x00 && new_temp != old_temp)
 2b2:	80 91 0b 20 	lds	r24, 0x200B	; 0x80200b <new_temp>
 2b6:	88 23       	and	r24, r24
 2b8:	a1 f4       	brne	.+40     	; 0x2e2 <main+0x6a>
 2ba:	90 91 0b 20 	lds	r25, 0x200B	; 0x80200b <new_temp>
 2be:	80 91 0a 20 	lds	r24, 0x200A	; 0x80200a <old_temp>
 2c2:	98 17       	cp	r25, r24
 2c4:	71 f0       	breq	.+28     	; 0x2e2 <main+0x6a>
		{
			frequency = 3744;
 2c6:	80 ea       	ldi	r24, 0xA0	; 160
 2c8:	9e e0       	ldi	r25, 0x0E	; 14
 2ca:	80 93 08 20 	sts	0x2008, r24	; 0x802008 <frequency>
 2ce:	90 93 09 20 	sts	0x2009, r25	; 0x802009 <frequency+0x1>
			tcc0_init();
 2d2:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <tcc0_init>
			TCC0.CTRLA = TC_CLKSEL_DIV1_gc;
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	98 e0       	ldi	r25, 0x08	; 8
 2da:	21 e0       	ldi	r18, 0x01	; 1
 2dc:	fc 01       	movw	r30, r24
 2de:	20 83       	st	Z, r18
 2e0:	17 c0       	rjmp	.+46     	; 0x310 <main+0x98>
		}
		else if(new_temp == 0x01 && new_temp != old_temp)
 2e2:	80 91 0b 20 	lds	r24, 0x200B	; 0x80200b <new_temp>
 2e6:	81 30       	cpi	r24, 0x01	; 1
 2e8:	99 f4       	brne	.+38     	; 0x310 <main+0x98>
 2ea:	90 91 0b 20 	lds	r25, 0x200B	; 0x80200b <new_temp>
 2ee:	80 91 0a 20 	lds	r24, 0x200A	; 0x80200a <old_temp>
 2f2:	98 17       	cp	r25, r24
 2f4:	69 f0       	breq	.+26     	; 0x310 <main+0x98>
		{
			frequency = 4744;
 2f6:	88 e8       	ldi	r24, 0x88	; 136
 2f8:	92 e1       	ldi	r25, 0x12	; 18
 2fa:	80 93 08 20 	sts	0x2008, r24	; 0x802008 <frequency>
 2fe:	90 93 09 20 	sts	0x2009, r25	; 0x802009 <frequency+0x1>
			tcc0_init();
 302:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <tcc0_init>
			TCC0.CTRLA = TC_CLKSEL_DIV1_gc;
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	98 e0       	ldi	r25, 0x08	; 8
 30a:	21 e0       	ldi	r18, 0x01	; 1
 30c:	fc 01       	movw	r30, r24
 30e:	20 83       	st	Z, r18
		}
		
		old_temp = new_temp;
 310:	80 91 0b 20 	lds	r24, 0x200B	; 0x80200b <new_temp>
 314:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <old_temp>
		
		
		/* Ensure the CH0DATA register is empty before starting a new conversion. */
		while(!(DACA.STATUS & DAC_CH0DRE_bm));		
 318:	00 00       	nop
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	93 e0       	ldi	r25, 0x03	; 3
 31e:	fc 01       	movw	r30, r24
 320:	85 81       	ldd	r24, Z+5	; 0x05
 322:	88 2f       	mov	r24, r24
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	81 70       	andi	r24, 0x01	; 1
 328:	99 27       	eor	r25, r25
 32a:	89 2b       	or	r24, r25
 32c:	b1 f3       	breq	.-20     	; 0x31a <main+0xa2>
		
		DACA.CH0DATA = voltage[voltage_position];	
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	93 e0       	ldi	r25, 0x03	; 3
 332:	20 91 06 20 	lds	r18, 0x2006	; 0x802006 <__data_end>
 336:	30 91 07 20 	lds	r19, 0x2007	; 0x802007 <__data_end+0x1>
 33a:	22 0f       	add	r18, r18
 33c:	33 1f       	adc	r19, r19
 33e:	20 50       	subi	r18, 0x00	; 0
 340:	30 4e       	sbci	r19, 0xE0	; 224
 342:	f9 01       	movw	r30, r18
 344:	20 81       	ld	r18, Z
 346:	31 81       	ldd	r19, Z+1	; 0x01
 348:	fc 01       	movw	r30, r24
 34a:	20 8f       	std	Z+24, r18	; 0x18
 34c:	31 8f       	std	Z+25, r19	; 0x19
    }
 34e:	aa cf       	rjmp	.-172    	; 0x2a4 <main+0x2c>

00000350 <io_init>:
}

void io_init(void)
{
 350:	cf 93       	push	r28
 352:	df 93       	push	r29
 354:	cd b7       	in	r28, 0x3d	; 61
 356:	de b7       	in	r29, 0x3e	; 62
	/* SPST switch on LED backpack as input */
	PORTE.DIRCLR = 0b00000001;
 358:	80 e8       	ldi	r24, 0x80	; 128
 35a:	96 e0       	ldi	r25, 0x06	; 6
 35c:	21 e0       	ldi	r18, 0x01	; 1
 35e:	fc 01       	movw	r30, r24
 360:	22 83       	std	Z+2, r18	; 0x02
}
 362:	00 00       	nop
 364:	df 91       	pop	r29
 366:	cf 91       	pop	r28
 368:	08 95       	ret

0000036a <dac_init>:


void dac_init(void)
{
 36a:	cf 93       	push	r28
 36c:	df 93       	push	r29
 36e:	cd b7       	in	r28, 0x3d	; 61
 370:	de b7       	in	r29, 0x3e	; 62
	/* Use only channel 0 */
	DACA.CTRLB = DAC_CHSEL_SINGLE_gc;
 372:	80 e0       	ldi	r24, 0x00	; 0
 374:	93 e0       	ldi	r25, 0x03	; 3
 376:	fc 01       	movw	r30, r24
 378:	11 82       	std	Z+1, r1	; 0x01
	
	/* Use AREFB (2.5V). Data is right-adjusted. */
	DACA.CTRLC = DAC_REFSEL_AREFB_gc;
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	93 e0       	ldi	r25, 0x03	; 3
 37e:	28 e1       	ldi	r18, 0x18	; 24
 380:	fc 01       	movw	r30, r24
 382:	22 83       	std	Z+2, r18	; 0x02
	
	/* Enable channel 0, as well as the overall DAC module. */
	DACA.CTRLA = DAC_CH0EN_bm | DAC_ENABLE_bm;	
 384:	80 e0       	ldi	r24, 0x00	; 0
 386:	93 e0       	ldi	r25, 0x03	; 3
 388:	25 e0       	ldi	r18, 0x05	; 5
 38a:	fc 01       	movw	r30, r24
 38c:	20 83       	st	Z, r18
}
 38e:	00 00       	nop
 390:	df 91       	pop	r29
 392:	cf 91       	pop	r28
 394:	08 95       	ret

00000396 <intr_init>:

void intr_init(void)
{
 396:	cf 93       	push	r28
 398:	df 93       	push	r29
 39a:	cd b7       	in	r28, 0x3d	; 61
 39c:	de b7       	in	r29, 0x3e	; 62
	/* Enable low level interrupts in the PMIC. */
	PMIC.CTRL = PMIC_LOLVLEN_bm;
 39e:	80 ea       	ldi	r24, 0xA0	; 160
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	21 e0       	ldi	r18, 0x01	; 1
 3a4:	fc 01       	movw	r30, r24
 3a6:	22 83       	std	Z+2, r18	; 0x02
	
	/* Enable interrupts globally. */
	sei();
 3a8:	78 94       	sei
}
 3aa:	00 00       	nop
 3ac:	df 91       	pop	r29
 3ae:	cf 91       	pop	r28
 3b0:	08 95       	ret

000003b2 <tcc0_init>:


void tcc0_init(void)
{
 3b2:	0f 93       	push	r16
 3b4:	1f 93       	push	r17
 3b6:	cf 93       	push	r28
 3b8:	df 93       	push	r29
 3ba:	cd b7       	in	r28, 0x3d	; 61
 3bc:	de b7       	in	r29, 0x3e	; 62
	//;set TCC0 period register
	// we want a frequency of 3744Hz
	//;TCC0_PER = (fclk/prescalar) * (duration in seconds)
	//;				32MH/1					1/3744
	
	TCC0.CNT = 0;
 3be:	80 e0       	ldi	r24, 0x00	; 0
 3c0:	98 e0       	ldi	r25, 0x08	; 8
 3c2:	fc 01       	movw	r30, r24
 3c4:	10 a2       	std	Z+32, r1	; 0x20
 3c6:	11 a2       	std	Z+33, r1	; 0x21
	TCC0.PER = (32000000/1) / (3 * frequency);
 3c8:	00 e0       	ldi	r16, 0x00	; 0
 3ca:	18 e0       	ldi	r17, 0x08	; 8
 3cc:	20 91 08 20 	lds	r18, 0x2008	; 0x802008 <frequency>
 3d0:	30 91 09 20 	lds	r19, 0x2009	; 0x802009 <frequency+0x1>
 3d4:	c9 01       	movw	r24, r18
 3d6:	88 0f       	add	r24, r24
 3d8:	99 1f       	adc	r25, r25
 3da:	82 0f       	add	r24, r18
 3dc:	93 1f       	adc	r25, r19
 3de:	9c 01       	movw	r18, r24
 3e0:	99 0f       	add	r25, r25
 3e2:	44 0b       	sbc	r20, r20
 3e4:	55 0b       	sbc	r21, r21
 3e6:	80 e0       	ldi	r24, 0x00	; 0
 3e8:	98 e4       	ldi	r25, 0x48	; 72
 3ea:	a8 ee       	ldi	r26, 0xE8	; 232
 3ec:	b1 e0       	ldi	r27, 0x01	; 1
 3ee:	bc 01       	movw	r22, r24
 3f0:	cd 01       	movw	r24, r26
 3f2:	0e 94 4a 02 	call	0x494	; 0x494 <__divmodsi4>
 3f6:	da 01       	movw	r26, r20
 3f8:	c9 01       	movw	r24, r18
 3fa:	f8 01       	movw	r30, r16
 3fc:	86 a3       	std	Z+38, r24	; 0x26
 3fe:	97 a3       	std	Z+39, r25	; 0x27
	
	/* Clear OVFIF to be safe */
	TCC0.INTCTRLA = TC_OVFINTLVL_LO_gc;
 400:	80 e0       	ldi	r24, 0x00	; 0
 402:	98 e0       	ldi	r25, 0x08	; 8
 404:	21 e0       	ldi	r18, 0x01	; 1
 406:	fc 01       	movw	r30, r24
 408:	26 83       	std	Z+6, r18	; 0x06
	
	/* Set as low level interrupt */
	TCC0.INTCTRLA = TC_OVFINTLVL_LO_gc;
 40a:	80 e0       	ldi	r24, 0x00	; 0
 40c:	98 e0       	ldi	r25, 0x08	; 8
 40e:	21 e0       	ldi	r18, 0x01	; 1
 410:	fc 01       	movw	r30, r24
 412:	26 83       	std	Z+6, r18	; 0x06
}
 414:	00 00       	nop
 416:	df 91       	pop	r29
 418:	cf 91       	pop	r28
 41a:	1f 91       	pop	r17
 41c:	0f 91       	pop	r16
 41e:	08 95       	ret

00000420 <__vector_14>:




ISR(TCC0_OVF_vect)
{
 420:	1f 92       	push	r1
 422:	0f 92       	push	r0
 424:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
 428:	0f 92       	push	r0
 42a:	11 24       	eor	r1, r1
 42c:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 430:	0f 92       	push	r0
 432:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 436:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 43a:	0f 92       	push	r0
 43c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 440:	8f 93       	push	r24
 442:	9f 93       	push	r25
 444:	cf 93       	push	r28
 446:	df 93       	push	r29
 448:	cd b7       	in	r28, 0x3d	; 61
 44a:	de b7       	in	r29, 0x3e	; 62
	//DACA.CH0DATA = voltage[voltage_position];
	voltage_position++;
 44c:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <__data_end>
 450:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <__data_end+0x1>
 454:	01 96       	adiw	r24, 0x01	; 1
 456:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <__data_end>
 45a:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <__data_end+0x1>
	
	if(voltage_position == 3)
 45e:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <__data_end>
 462:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <__data_end+0x1>
 466:	03 97       	sbiw	r24, 0x03	; 3
 468:	21 f4       	brne	.+8      	; 0x472 <__vector_14+0x52>
	{
		voltage_position = 0;
 46a:	10 92 06 20 	sts	0x2006, r1	; 0x802006 <__data_end>
 46e:	10 92 07 20 	sts	0x2007, r1	; 0x802007 <__data_end+0x1>
	}
	
}
 472:	00 00       	nop
 474:	df 91       	pop	r29
 476:	cf 91       	pop	r28
 478:	9f 91       	pop	r25
 47a:	8f 91       	pop	r24
 47c:	0f 90       	pop	r0
 47e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 482:	0f 90       	pop	r0
 484:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 488:	0f 90       	pop	r0
 48a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
 48e:	0f 90       	pop	r0
 490:	1f 90       	pop	r1
 492:	18 95       	reti

00000494 <__divmodsi4>:
 494:	05 2e       	mov	r0, r21
 496:	97 fb       	bst	r25, 7
 498:	1e f4       	brtc	.+6      	; 0x4a0 <__divmodsi4+0xc>
 49a:	00 94       	com	r0
 49c:	0e 94 61 02 	call	0x4c2	; 0x4c2 <__negsi2>
 4a0:	57 fd       	sbrc	r21, 7
 4a2:	07 d0       	rcall	.+14     	; 0x4b2 <__divmodsi4_neg2>
 4a4:	0e 94 69 02 	call	0x4d2	; 0x4d2 <__udivmodsi4>
 4a8:	07 fc       	sbrc	r0, 7
 4aa:	03 d0       	rcall	.+6      	; 0x4b2 <__divmodsi4_neg2>
 4ac:	4e f4       	brtc	.+18     	; 0x4c0 <__divmodsi4_exit>
 4ae:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <__negsi2>

000004b2 <__divmodsi4_neg2>:
 4b2:	50 95       	com	r21
 4b4:	40 95       	com	r20
 4b6:	30 95       	com	r19
 4b8:	21 95       	neg	r18
 4ba:	3f 4f       	sbci	r19, 0xFF	; 255
 4bc:	4f 4f       	sbci	r20, 0xFF	; 255
 4be:	5f 4f       	sbci	r21, 0xFF	; 255

000004c0 <__divmodsi4_exit>:
 4c0:	08 95       	ret

000004c2 <__negsi2>:
 4c2:	90 95       	com	r25
 4c4:	80 95       	com	r24
 4c6:	70 95       	com	r23
 4c8:	61 95       	neg	r22
 4ca:	7f 4f       	sbci	r23, 0xFF	; 255
 4cc:	8f 4f       	sbci	r24, 0xFF	; 255
 4ce:	9f 4f       	sbci	r25, 0xFF	; 255
 4d0:	08 95       	ret

000004d2 <__udivmodsi4>:
 4d2:	a1 e2       	ldi	r26, 0x21	; 33
 4d4:	1a 2e       	mov	r1, r26
 4d6:	aa 1b       	sub	r26, r26
 4d8:	bb 1b       	sub	r27, r27
 4da:	fd 01       	movw	r30, r26
 4dc:	0d c0       	rjmp	.+26     	; 0x4f8 <__udivmodsi4_ep>

000004de <__udivmodsi4_loop>:
 4de:	aa 1f       	adc	r26, r26
 4e0:	bb 1f       	adc	r27, r27
 4e2:	ee 1f       	adc	r30, r30
 4e4:	ff 1f       	adc	r31, r31
 4e6:	a2 17       	cp	r26, r18
 4e8:	b3 07       	cpc	r27, r19
 4ea:	e4 07       	cpc	r30, r20
 4ec:	f5 07       	cpc	r31, r21
 4ee:	20 f0       	brcs	.+8      	; 0x4f8 <__udivmodsi4_ep>
 4f0:	a2 1b       	sub	r26, r18
 4f2:	b3 0b       	sbc	r27, r19
 4f4:	e4 0b       	sbc	r30, r20
 4f6:	f5 0b       	sbc	r31, r21

000004f8 <__udivmodsi4_ep>:
 4f8:	66 1f       	adc	r22, r22
 4fa:	77 1f       	adc	r23, r23
 4fc:	88 1f       	adc	r24, r24
 4fe:	99 1f       	adc	r25, r25
 500:	1a 94       	dec	r1
 502:	69 f7       	brne	.-38     	; 0x4de <__udivmodsi4_loop>
 504:	60 95       	com	r22
 506:	70 95       	com	r23
 508:	80 95       	com	r24
 50a:	90 95       	com	r25
 50c:	9b 01       	movw	r18, r22
 50e:	ac 01       	movw	r20, r24
 510:	bd 01       	movw	r22, r26
 512:	cf 01       	movw	r24, r30
 514:	08 95       	ret

00000516 <_exit>:
 516:	f8 94       	cli

00000518 <__stop_program>:
 518:	ff cf       	rjmp	.-2      	; 0x518 <__stop_program>
